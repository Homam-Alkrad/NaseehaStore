@model IEnumerable<NaseehaStore.Models.Data.Order>
@{
    var cities = ViewBag.Cities as List<string>;
    Layout = "";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders</title>
    <link href="~/css/site3.css" rel="stylesheet" />
    <style>
        /* Navbar Styles */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
        }

            .navbar .logo {
                font-size: 1.5rem;
                font-weight: bold;
            }

            .navbar .menu {
                display: flex;
                gap: 15px;
            }

                .navbar .menu a {
                    color: white;
                    text-decoration: none;
                    font-weight: bold;
                }

        th a {
            color: black;
        }

        @@media (max-width: 768px) {
            .navbar .logo {
                display: none; /* Hide logo on phone size */
            }

            .navbar .menu {
                width: 100%;
                justify-content: space-between;
            }
        }

        /* Button Base Styles */
        .btn {
            display: inline-block;
            padding: 10px 20px;
            font-size: 0.9rem;
            font-weight: bold;
            text-align: center;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
            cursor: pointer;
            color: white;
        }

            .btn.confirm {
                background-color: #007bff;
            }

                .btn.confirm:hover {
                    background-color: #0056b3;
                }

            .btn.confirmed {
                background-color: #28a745;
            }

            .btn.deliver {
                background-color: #ffc107;
            }

                .btn.deliver:hover {
                    background-color: #e0a800;
                }

            .btn.delivered {
                background-color: #28a745;
            }

        /* Responsive Layout for Orders Table */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

            table th, table td {
                padding: 10px;
                text-align: left;
                border: 1px solid #ddd;
            }

            table th {
                color: black;
                background-color: #f4f4f4;
            }

        .content-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

            .content-buttons a {
                padding: 10px 15px;
                border-radius: 5px;
                background-color: #007bff;
                color: white;
                font-weight: bold;
                text-decoration: none;
                transition: background-color 0.3s;
            }

                .content-buttons a:hover {
                    background-color: #0056b3;
                }

        center a {
            display: none;
        }

    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="logo">My Store</div>
        <div class="menu">
            <a asp-action="ShippedOrders" asp-controller="Dashboard">المشحونة</a>
            <a asp-action="PreparedOrders" asp-controller="Dashboard">المجهزة</a>
            <a asp-action="Index" asp-controller="Courses">العروض</a>
            <a asp-action="AllOrders" asp-controller="Dashboard">جميع الطلبات</a>
        </div>
    </nav>

    <!-- Author Panel -->
    <div class="container">
        <div class="author-panel">
            <!-- Search Box -->
            <div class="search-box">
                <input type="text" id="searchOrders" placeholder="البحث حسب رقم الطلب او اسم الطالب" />
            </div>

            <!-- Filters -->
            <div class="filters">
                <select id="filterName">
                    <option value="" selected>ترتيب حسب الاسم</option>
                    <option value="az">A-Z</option>
                    <option value="za">Z-A</option>
                </select>
                <select id="filterLocation">
                    <option value="" selected>تصنيف حسب الموقع</option>
                    @foreach (var city in cities)
                    {
                        <option value="@city">@city</option>
                    }
                </select>
                <select id="filterPrepared">
                    <option value="" selected>ترتيب حسب التجهيز</option>
                    <option value="prepared">المجهزة أولًا</option>
                    <option value="notPrepared">الغير مجهزة أولًا</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container">
        <h1>Orders</h1>
        <table id="ordersTable">
            <thead>
                <tr>
                    <th>رقم الطلب</th>
                    <th>اسم الطالب</th>
                    <th>المحافظة</th>
                    <th>المنقطة</th>
                    <th>السعر</th>
                    <th> تجهيز الطلب</th>
                    <th> شحن الطلب</th>
                    <th> واتس اب</th>
                </tr>
            </thead>
            <tbody id="ordersBody">
                @foreach (var order in Model)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.Student?.FullName</td>
                        <td>@order.Student?.City</td>
                        <td>@order.Student?.Location</td>
                        <td>@order.Price JD</td>

                        <td>
                            @if (order.IsPrepared)
                            {
                                <a asp-controller="Dashboard" asp-action="SetOrderAsPrepared" asp-route-id="@order.Id" class="btn  deliver" style="background-color:red;">الغاء التجهيز</a>
                            }
                            else
                            {
                                <a asp-controller="Dashboard" asp-action="SetOrderAsPrepared" asp-route-id="@order.Id" class="btn confirm"> تجهيز</a>
                            }
                        </td>
                        <td>
                            @if (order.IsShipped)
                            {
                                <a asp-controller="Dashboard" asp-action="SetAsDelivered" asp-route-id="@order.Id" class="btn  deliver" style="background-color:red;">الغاء الشحن</a>
                            }
                            else
                            {
                                <a asp-controller="Dashboard" asp-action="SetAsDelivered" asp-route-id="@order.Id" class="btn confirm"> شحن</a>
                            }
                        </td>
                        <td>
                            <a href="https://wa.me/@(order.Student?.MainPhone)" target="_blank" class="btn delivered"> واتس 1</a>
                            <a href="https://wa.me/@(order.Student?.SecondPhone)" target="_blank" class="btn delivered"> واتس 2</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>

    <script>
        // Get references to inputs and table rows
        const searchInput = document.getElementById("searchOrders");
        const filterName = document.getElementById("filterName");
        const filterLocation = document.getElementById("filterLocation");
        const filterPrepared = document.getElementById("filterPrepared"); // Sorting by IsPrepared
        const ordersBody = document.getElementById("ordersBody");
        const rows = Array.from(ordersBody.querySelectorAll("tr"));

        // Function to filter and sort orders
        function filterAndSortOrders() {
            const searchText = searchInput.value.toLowerCase();
            const sortOrder = filterName.value;
            const selectedLocation = filterLocation.value;
            const preparedOrder = filterPrepared.value; // Sorting by IsPrepared

            let filteredRows = rows;

            // Search by ID or Name
            if (searchText) {
                filteredRows = filteredRows.filter(row => {
                    const orderId = row.cells[0].innerText.toLowerCase();
                    const studentName = row.cells[1].innerText.toLowerCase();
                    return orderId.includes(searchText) || studentName.includes(searchText);
                });
            }

            // Filter by Location
            if (selectedLocation) {
                filteredRows = filteredRows.filter(row => {
                    const location = row.cells[2].innerText;
                    return location === selectedLocation;
                });
            }

            // Sort by Name (A-Z or Z-A)
            if (sortOrder === "az" || sortOrder === "za") {
                filteredRows.sort((a, b) => {
                    const nameA = a.cells[1].innerText.toLowerCase();
                    const nameB = b.cells[1].innerText.toLowerCase();
                    return sortOrder === "az" ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
                });
            }

            // Sort by Prepared Status (Prepared first or Not Prepared first)
            if (preparedOrder === "prepared" || preparedOrder === "notPrepared") {
                filteredRows.sort((a, b) => {
                    const isPreparedA = a.cells[6].querySelector(".btn.deliver") ? 1 : 0;
                    const isPreparedB = b.cells[6].querySelector(".btn.deliver") ? 1 : 0;
                    return preparedOrder === "prepared" ? isPreparedB - isPreparedA : isPreparedA - isPreparedB;
                });
            }

            // Update table
            ordersBody.innerHTML = "";
            filteredRows.forEach(row => ordersBody.appendChild(row));
        }

        // Event listeners for search and filters
        searchInput.addEventListener("input", filterAndSortOrders);
        filterName.addEventListener("change", filterAndSortOrders);
        filterLocation.addEventListener("change", filterAndSortOrders);
        filterPrepared.addEventListener("change", filterAndSortOrders); // Listen for IsPrepared sorting

    </script>
</body>
</html>
